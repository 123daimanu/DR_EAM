{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Program that extracts the information about the position and velocity of atoms in each sites along with charge and charge velocity at those sites in each frames.\n",
    "\n",
    "\n",
    "path=\"\" refers to the path of the dump file from which data is to be extracted\n",
    "\n",
    "frames=------ number of frames during openmd execution\n",
    "\n",
    "atomNumber=----------- total number of atomic sites during program execution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# extract information from dump file.\n",
    "import numpy as num\n",
    "import matplotlib.pyplot as plt\n",
    "import pylab as lab\n",
    "from scipy import constants\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#==================================================================================================================\n",
    "#path=\"/home/hbhattar/afs/Hemanta/metals/ImageCharge/Pt100ImageCharge/Simulation/ImageSlab.dump\"; #the path of the file\n",
    "#path=\"/home/hbhattar/afs/Hemanta/metals/ImageCharge/Pt100ImageCharge/Simulation/ImageSlabNFQ.dump\"; \n",
    "path=\"/home/hbhattar/afs/Hemanta/metals/ChargeDiffLayers/Slab_5_layers.dump\"; \n",
    "frames=100                   ;              #total frames in dump file\n",
    "atomNumber=160;         #total atoms in lattice\n",
    "\n",
    "\n",
    "#====================================================================================================================\n",
    "\n",
    "\n",
    "fileDump=open(path)  #dump file for info extraction\n",
    "linesDump=fileDump.readlines()\n",
    "\n",
    "processP=\"Wait\"\n",
    "processC=\"Wait\"\n",
    "\n",
    "\n",
    "#information storage matrix \n",
    "#posiiton and velocity storage\n",
    "x=num.zeros((frames,atomNumber))\n",
    "y=num.zeros((frames,atomNumber))\n",
    "z=num.zeros((frames,atomNumber))\n",
    "#fx=num.zeros((frames,atomNumber))\n",
    "#fy=num.zeros((frames,atomNumber))\n",
    "#fz=num.zeros((frames,atomNumber))\n",
    "vx=num.zeros((frames,atomNumber))\n",
    "vy=num.zeros((frames,atomNumber))\n",
    "vz=num.zeros((frames,atomNumber))\n",
    "\n",
    "\n",
    "#charge and velocity storage matrix\n",
    "c=num.zeros((frames,atomNumber))\n",
    "cv=num.zeros((frames,atomNumber))\n",
    "ey=num.zeros((frames,atomNumber))\n",
    "ex=num.zeros((frames,atomNumber))\n",
    "ez=num.zeros((frames,atomNumber))\n",
    "#frame count initilization\n",
    "fCount=0\n",
    "index=0  #index for the atoms\n",
    "for line in linesDump:\n",
    "    linesSplit=str.split(line)\n",
    "    length=len(linesSplit)\n",
    "    \n",
    "    if(length!=0 and linesSplit[0]==\"<StuntDoubles>\" and processP==\"Wait\"):\n",
    "        processP=\"Start\"\n",
    "        continue;\n",
    "        \n",
    "    elif(length!=0 and linesSplit[0]==\"</StuntDoubles>\" and processP==\"Start\"):\n",
    "        processP=\"Wait\"\n",
    "        index=0\n",
    "        continue;\n",
    "        \n",
    "    elif(length!=0 and linesSplit[0]==\"<SiteData>\" and processC==\"Wait\"):\n",
    "        processC=\"Start\"\n",
    "        continue;\n",
    "        \n",
    "    elif(length!=0 and linesSplit[0]==\"</SiteData>\" and processC==\"Start\"):\n",
    "        fCount=fCount+1\n",
    "        index=0;\n",
    "        processC=\"Wait\"\n",
    "        continue;\n",
    "   \n",
    "    elif(fCount>=frames):\n",
    "        break;\n",
    "        \n",
    "    else:\n",
    "        processP=processP;\n",
    "        processC=processC;\n",
    "        \n",
    "        \n",
    "    if (processP==\"Start\"):\n",
    "        x[fCount][index]=float(linesSplit[2])\n",
    "        y[fCount][index]=float(linesSplit[3])\n",
    "        z[fCount][index]=float(linesSplit[4])\n",
    "        vx[fCount][index]=float(linesSplit[5])\n",
    "        vy[fCount][index]=float(linesSplit[6])\n",
    "        vz[fCount][index]=float(linesSplit[7])\n",
    "        #fx[fCount][index]=float(linesSplit[8])\n",
    "        #fy[fCount][index]=float(linesSplit[9])\n",
    "        #fz[fCount][index]=float(linesSplit[10])\n",
    "        index=index+1\n",
    "        \n",
    "    if(processC==\"Start\"):\n",
    "        c[fCount][index]=float(linesSplit[3])\n",
    "        cv[fCount][index]=float(linesSplit[4])\n",
    "        ez[fCount][index]=float(linesSplit[7])\n",
    "        ey[fCount][index]=float(linesSplit[6])\n",
    "        ex[fCount][index]=float(linesSplit[5])\n",
    "        index=index+1\n",
    "       "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#determine the layers\n",
    "a=num.sort(list(set(z[0,0:atomNumber-2])))\n",
    "layer=[]\n",
    "for var in a:\n",
    "    layer.append(num.where(z[0]==var))\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "Ex=[]\n",
    "Ey=[]\n",
    "Ez=[]\n",
    "charge=[]\n",
    "framing=0\n",
    "for items in range(a.size):\n",
    "    Ex.append(sum(ex[framing][layer[items][0]])/float(layer[items][0].size))\n",
    "    Ey.append(sum(ey[framing][layer[items][0]])/float(layer[items][0].size))\n",
    "    Ez.append(sum(ez[framing][layer[items][0]])/float(layer[items][0].size))\n",
    "    charge.append(sum(c[framing][layer[items][0]])/float(layer[items][0].size))\n",
    "    \n",
    "    \n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def chargeDen(r):\n",
    "    r=num.array(r)\n",
    "    fe=2.336509\n",
    "    re=2.771916\n",
    "    lam=0.826967\n",
    "    beta=3.775974\n",
    "    expArg=beta*(1-r/float(re))\n",
    "    denoArg=1+(r/float(re)-lam)**20\n",
    "    fr=fe*num.divide(num.exp(expArg),(denoArg))\n",
    "    return fr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f35c73da8d0>]"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f35c690fd30>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dist=num.linspace(0,6,100)\n",
    "lab.plot(dist,chargeDen(dist))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "R=num.array([x[99,:],y[99,:],z[99,:]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def dist(R,xf,yf,zf):\n",
    "    r=num.ones(R.size).reshape(R.shape)\n",
    "    r[0,:]=xf*r[0,:]\n",
    "    r[1,:]=yf*r[1,:]\n",
    "    r[2,:]=zf*r[2,:]\n",
    "    diff=R-r\n",
    "    diff2=diff**2\n",
    "    sumdiff2=num.sum(diff2,axis=0)\n",
    "    \n",
    "    return num.sqrt(sumdiff2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def partialCharge(q):\n",
    "    return 1-q/float(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def totalChargeDen(partial,chargeden):\n",
    "    return(num.dot(partial,chargeden))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "zz=num.linspace(-4.5,4.5,1000)\n",
    "chargedist=[]\n",
    "for var in zz:\n",
    "    chargedist.append(totalChargeDen(partialCharge(c[99,:]),chargeDen(dist(R,0,0,var))))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f35c6904ef0>]"
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nf7dG78brmmtsp7Rf/CL8axctsm7Yf/93m6NdLq6+2sYC/Pu/h3+t9zb47Jxz1HMVt2OPtSV+Z82y\n2y29etlAzquugh//OO3qJAyNk61gBxxgg6Yee8zuvR59tC0WpMVT4jdwoE2tuvlm++ALM2L9hhts\nmlsxH5RZ1q2b9WxceKGF0zDb+D71lF2V/vSn8dUnO5xyCsyZY1Mu162z/1dZ3oJaWud8nPtxFlKA\ncyOAGTNmzGDEiBGp1iKSpJkzLXTddZdNsSrEU0/BWWfZdKwrroi3vjR4b/P333rLfj49ehT2muOP\nt6lnU6cqwEplqa2tZeTIkQAjvfe1YV6rWwA5NmnSpLRLyJ0s/cyGD7c9Gm68sbCxAOvXW1AYOzb5\n+9xJ/dycg7vvhsWL7edSiIcesg/+H/wgWx/+WTrX8kQ/t+SEDgDOuf7OuQecc6uccxudc7OaruKb\nP+c7zrllTd9/2jk3NLqSJaBflPCy9jP7/vftg/3669t/3vbtNnBw3Tr7gEz6gy7Jn9shh8D3vmf3\n9P/0p/afu2qV3X8+7zwb0JolWTvX8kI/t+SECgDOuT7AFOBd4CxgGPBlYG2z53wVuAb4HHAs8A7w\nV+echpWJtDBoEPzoR3DHHbY2Q2u8t+lXf/yjzd7Yf/9ES0zFl75kH+qXXNL23hVbt9qCP1u3FrZE\nrYjsLGwPwNeAeu/9ld77Gd77xd77Z7z3C5s95zrgu977x7z3rwGXAf0BbQsh0orx423u+mWX2Tzq\n5t5916ZW/eAHFhTGjUunxqR16mSrJQ4bZlf2Tz218/c3brSf2TPPWHDq1y+dOkXyLOwsgHHAk865\nh4CTgaXAbd77uwGcc4OBfsCzwQu89+udc1OB44GIVkAXKR/O2aC+bdts7/Vx42xK5po1tljQ4sW2\n5O8XvpB2pcnabTf7gP/kJ23g47nn2tc1a2z65MqV9uE/dmzalYrkU9gAMAT4AvBj4PtYF/+tzrl3\nvfcPYB/+HljZ4nUrm77Xmu4AdXV1IUuRxsZGamtDDfqseFn+mX3lK3DoodbN//jjtmnQmDF2P/zA\nAyHNstP8uX3/+7Zr4G9/u+PnMnq0rUk/aFC6P5f2ZPlcyzL93MJp9tnZPexrQ00DdM69C0zz3p/Y\n7LFbgGO892Occ8cDk4H+3vuVzZ7zW2C79/4Da0Q55y4Gfh22cBEREXnfJd7734R5QdgegOVAy0v1\nOuCCpv9eATigLzv3AvQF2hjKw1+BS4BFwOaQ9YiIiFSy7sAg7LM0lLABYApwcIvHDgYWA3jvFzrn\nVuVWH6UAAAUbSURBVACnA68AOOd2B0YB/9PaAb33q4FQqUVERETe93/FvChsAJgITHHO3YAN6BsF\nXAl8ttlzbga+6Zybh13VfxdYAjxaTIEiIiISvdBLATvnPgrcBAwFFgI/9t7/osVzvoWtA9AHeBG4\n2ntf4k7fIiIiEpXU9wIQERGR5GkvABERkQqkACAiIlKBMhkAnHNnO+deatpMaI1z7uG0a8oD59wu\nzrmZzrntzjntzt0O59z+zrm7nXMLms6zuc65bznnuqZdW5Y45652zi10zm1q+p38UNo1ZZlz7gbn\n3DTn3Hrn3Ern3CPOuYPSritPnHNfa2rDfpJ2LVlXyOZ87clcAHDOfRy4H7gHOAIYjaYJFuqH2IwL\nDezo2CHYmhWfBQ4FJgDjsRUuBXDOXYit+vkfwNHALGxjr71TLSzbTgR+is2QGgt0BZ5yzvVItaqc\naAqYn8PONWlHIZvzdXiMLA0CdM51xqYO3ui9vzfdavLFOfcR4EfAx4HZwHDv/SvpVpUvzrmvAOO9\n99q+GnDOvQRM9d5f1/R3BzQAt3rvf5hqcTnRFJbeBE7y3k9Ou54sc87tBszAlpu/EfiH9/5L6VaV\nXc65m4DjvfcnF3uMrPUAjMB2DsQ5V+ucW+ace8I5d1jKdWWac64v8HPgUmBTyuXkWR9gTdpFZEHT\nrZCR7LyxlweewTb2ksL0wXrkdF517H+AP3vvn0u7kJwYB7zsnHuo6XZTrXPuyjAHyFoAGIJ1y/4H\n8B3gbKw7429N3R3Sul9iuzK2tdyydMA5NxS4Brgj7VoyYm+gM+E29pJmmnpMbgYme+9np11Pljnn\nLgKGAzekXUuOBJvzvQGcCdyObc73qUIPkEgAcM79V9Ogjrb+vNc0UCao53ve+z82faBdjiXoTyRR\na1YU+jNzzl0L7Ab8IHhpimWnLsS51vw1A4C/AL9tuaiVSAluw8aXXJR2IVnmnBuIBaVLvPdb064n\nRzoBM7z3N3rvZ3nv7wLuwsYyFSTsUsDF+hF2ldqeBTR1/9NswyHv/Rbn3AKgOqbasqqQn9lC4FSs\nS/Zdu+B438vOuV977y+Pqb6sKvRcA2wULfAcdpX2+TgLy5lVwHvYRl7N9cU2/ZJ2OOd+BnwUONF7\nvzztejJuJLAPUOt2NGKdgZOcc9cA3XyWBqtlR0eb83UokQDQtOHP6o6e55ybgY1oPJimzQ2a7kUO\nomnDoUoR4mf2b8A3mj3UH9sV6pPAtHiqy65Cf27w/pX/c8B04Io468ob7/3Wpt/H04E/wftd2qcD\nt6ZZW9Y1ffh/DDjZe1+fdj058Aw246u5e7EPs5v04d+mdjfnK0RSPQAF8d5vcM7dAXzbObcE+4dc\nj90C+F2qxWWU935J8787597BbgMs8N4vS6eq7Gu68v8b1otyPbBvcPHhvW9537tS/QS4tykITMOm\nSvbEGmdphXPuNqAGOBd4p2mALkCj917bnbfCe/8ONnPpfU3t2GrvfcsrXNmhkM352pWpANDkK8BW\nbC2AHsBU4DTvfWOqVeWLEnPHzsAG0QzBpraBBSePdT9WPO/9Q03T2L6Ddf3PBM7y3r+VbmWZNh47\nh/7W4vHLsTZNCqM2rAPe+5edc+djm/PdiF3MXOe9f7DQY2RqHQARERFJRtamAYqIiEgCFABEREQq\nkAKAiIhIBVIAEBERqUAKACIiIhVIAUBERKQCKQCIiIhUIAUAERGRCqQAICIiUoEUAERERCqQAoCI\niEgF+v8ogMChLzg2ZgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f35c696a630>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lab.plot(zz,chargedist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-9.1549699219999994"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num.min(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
